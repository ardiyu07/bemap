# Once done this will define
#  OPENCL_FOUND        - system has OpenCL
#  OPENCL_INCLUDE_DIRS  - the OpenCL include directory
#  OPENCL_LIBRARIES    - link these to use OpenCL

SET (OPENCL_VERSION_STRING "1.1.0")
SET (OPENCL_VERSION_MAJOR 1)
SET (OPENCL_VERSION_MINOR 1)
SET (OPENCL_VERSION_PATCH 0)

SET (OPENCL_NVIDIA_ENABLE TRUE)
SET (OPENCL_AMD_ENABLE TRUE)
SET (OPENCL_INTEL_ENABLE TRUE)

IF (ROCAFW_TARGET_OPENCL STREQUAL "NVIDIA")
  SET (OPENCL_AMD_ENABLE FALSE)
  SET (OPENCL_INTEL_ENABLE FALSE)
ELSEIF (ROCAFW_TARGET_OPENCL STREQUAL "AMD")
  SET (OPENCL_NVIDIA_ENABLE FALSE)
  SET (OPENCL_INTEL_ENABLE FALSE)
ELSEIF (ROCAFW_TARGET_OPENCL STREQUAL "Intel")
  SET (OPENCL_NVIDIA_ENABLE FALSE)
  SET (OPENCL_AMD_ENABLE FALSE)
ENDIF ()

IF (APPLE)

  FIND_LIBRARY(OPENCL_LIBRARIES OpenCL DOC "OpenCL lib for OSX")
  FIND_PATH(OPENCL_INCLUDE_DIRS OpenCL/cl.h DOC "Include for OpenCL on OSX")
  FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC "Include for OpenCL CPP bindings on OSX")

ELSE (APPLE)

  IF (WIN32)
    
    FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h)
    FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp)
    
    IF((NOT "$ENV{CUDA_PATH}" STREQUAL "") AND OPENCL_NVIDIA_ENABLE)
      # Nvidia OpenCL
      IF(CMAKE_CL_64)
        SET(OPENCL_LIB_DIR "$ENV{CUDA_PATH}/OpenCL/common/lib/x64")
      ELSEIF(NOT CMAKE_CL_64)
        SET(OPENCL_LIB_DIR "$ENV{CUDA_PATH}/OpenCL/common/lib/Win32")
      ELSE()
        MESSAGE(FATAL_ERROR "Error : Could not determine build platform.") 
     ENDIF()

      FIND_LIBRARY(OPENCL_LIB_DIR OpenCL.lib ${OPENCL_LIB_DIR})
      SET(_OPENCL_INC_CAND "$ENV{CUDA_INC_PATH}")
    ENDIF()
    IF((NOT "$ENV{AMDAPPSDKROOT}" STREQUAL "") AND OPENCL_AMD_ENABLE)
      # The AMD SDK currently installs both x86 and x86_64 libraries
      # This is only a hack to find out architecture
      IF(CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{AMDAPPSDKROOT}/lib/x86_64")
      ELSEIF(NOT CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{AMDAPPSDKROOT}/lib/x86")
      ELSE()
        MESSAGE(FATAL_ERROR "Error : Could not determine build platform.")
      ENDIF()
      FIND_LIBRARY(OPENCL_LIBRARIES OpenCL.lib ${OPENCL_LIB_DIR})

      GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)
    ENDIF()
    IF((NOT "$ENV{INTELOCLSDKROOT}" STREQUAL "") AND OPENCL_INTEL_ENABLE)
      # Intel OpenCL
      IF(CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{INTELOCLSDKROOT}/lib/x64")
      ELSEIF(NOT CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{INTELOCLSDKROOT}/lib/x86")
      ELSE()
        MESSAGE(FATAL_ERROR "Error : Could not determine build platform.")
      ENDIF()
      FIND_LIBRARY(OPENCL_LIBRARIES OpenCL.lib ${OPENCL_LIB_DIR})

      GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)
    ELSE ()
      MESSAGE(FATAL_ERROR "Error : Could not find build platform.")
    ENDIF()
    
    # On Win32 search relative to the library
    FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h PATHS "${_OPENCL_INC_CAND}")
    FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp PATHS "${_OPENCL_INC_CAND}")
    
  ELSE (WIN32)

    IF((NOT "$ENV{CUDA_PATH}" STREQUAL "") AND OPENCL_NVIDIA_ENABLE)
      # Nvidia OpenCL
      IF(CMAKE_CL_64)
        SET(OPENCL_LIB_DIR "$ENV{CUDA_PATH}/OpenCL/common/lib/x64")
      ELSEIF(NOT CMAKE_CL_64)
        SET(OPENCL_LIB_DIR "$ENV{CUDA_PATH}/OpenCL/common/lib/Win32")
      ELSE()
        MESSAGE(FATAL_ERROR "Error : Could not determine build platform.") 
      ENDIF()

      FIND_LIBRARY(OPENCL_LIB_DIR OpenCL.lib ${OPENCL_LIB_DIR})
      SET(_OPENCL_INC_CAND "$ENV{CUDA_INC_PATH}")
    ELSEIF((NOT "$ENV{AMDAPPSDKROOT}" STREQUAL "") AND OPENCL_AMD_ENABLE)
      # The AMD SDK currently installs both x86 and x86_64 libraries
      # This is only a hack to find out architecture
      IF(CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{AMDAPPSDKROOT}/lib/x86_64")
      ELSEIF(NOT CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{AMDAPPSDKROOT}/lib/x86")
      ELSE()
        MESSAGE(FATAL_ERROR "Error : Could not determine build platform.")
      ENDIF()
      FIND_LIBRARY(OPENCL_LIBRARIES OpenCL.lib ${OPENCL_LIB_DIR})

      GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)
    ELSEIF((NOT "$ENV{INTELOCLSDKROOT}" STREQUAL "") AND OPENCL_INTEL_ENABLE)
      # Intel OpenCL
      IF(CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{INTELOCLSDKROOT}/lib/x64")
      ELSEIF(NOT CMAKE_CL_64)
	SET(OPENCL_LIB_DIR "$ENV{INTELOCLSDKROOT}/lib/x86")
      ELSE()
        MESSAGE(FATAL_ERROR "Error : Could not determine build platform.")
      ENDIF()
      FIND_LIBRARY(OPENCL_LIBRARIES OpenCL.lib ${OPENCL_LIB_DIR})

      GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)
    ELSE ()
      MESSAGE(FATAL_ERROR "Error : Could not find build platform.")
    ENDIF()

    # Unix style platforms
    FIND_LIBRARY(OPENCL_LIBRARIES OpenCL
      ENV LD_LIBRARY_PATH
      ${OPENCL_LIB_DIR}
      )

    GET_FILENAME_COMPONENT(OPENCL_LIB_DIR ${OPENCL_LIBRARIES} PATH)
    GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)

    # Therefore also search alternative
    # to the include headers
    FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h PATHS ${_OPENCL_INC_CAND} "/usr/local/cuda/include" "$ENV{AMDAPPSDKROOT}/include")
    FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp PATHS ${_OPENCL_INC_CAND} "/usr/local/cuda/include")

  ENDIF (WIN32)

ENDIF (APPLE)

IF( _OPENCL_CPP_INCLUDE_DIRS )
  SET( OPENCL_HAS_CPP_BINDINGS TRUE )
  LIST( APPEND OPENCL_INCLUDE_DIRS ${_OPENCL_CPP_INCLUDE_DIRS} )
  # This is often the same, so clean up
  LIST( REMOVE_DUPLICATES OPENCL_INCLUDE_DIRS )
ENDIF( _OPENCL_CPP_INCLUDE_DIRS )

MARK_AS_ADVANCED(OPENCL_INCLUDE_DIRS)

